#![deny(warnings)]

use crate::formula;
use crate::git;
use crate::util;
use crate::util::iso8601;

use eyre::Report;
use sha2::{Digest, Sha256};
use std::env;
use std::fs;
use std::fs::File;
use std::io::BufReader;
use std::io::Read;
use std::io::Write;
use std::time::{SystemTime, UNIX_EPOCH};

pub async fn install(package_name: &str) -> Result<(), Report> {
    let url = format!("https://{}-cask.git", package_name);

    let unix_time = {
        let start = SystemTime::now();

        let t = start.duration_since(UNIX_EPOCH)?;

        t.as_secs()
    };

    let formula_cloned_dir = env::temp_dir().join(format!("cask_{}", unix_time));
    let cask_file_path = formula_cloned_dir.join("Cask.toml");

    let package_formula = match git::clone(&url, &formula_cloned_dir, vec![]) {
        Ok(()) => {
            if !cask_file_path.exists() {
                // remove cloned repo
                fs::remove_dir_all(formula_cloned_dir)?;
                return Err(eyre::format_err!(
                    "{} is not a valid formula!",
                    package_name
                ));
            }

            let f = formula::new(&cask_file_path)?;

            Ok(f)
        }
        Err(e) => Err(e),
    }?;

    let option_target = if cfg!(target_os = "macos") {
        package_formula.darwin
    } else if cfg!(target_os = "windows") {
        package_formula.windows
    } else if cfg!(target_os = "linux") {
        package_formula.linux
    } else {
        fs::remove_dir_all(formula_cloned_dir)?;
        return Err(eyre::format_err!(
            "{} not support your system",
            package_name
        ));
    };

    let target = match option_target {
        Some(p) => Ok(p),
        None => Err(eyre::format_err!(
            "{} not support your system",
            package_name
        )),
    }?;

    let hash_of_package = {
        let mut hasher = Sha256::new();

        hasher.update(package_name);
        format!("{:X}", hasher.finalize())
    };

    let package_dir = {
        let mut d = match dirs::home_dir() {
            Some(d) => Ok(d),
            None => Err(eyre::format_err!("can not found home dir")),
        }?;

        d = d.join(".cask").join("formula").join(hash_of_package);

        d
    };

    // init formula folder
    {
        if !&package_dir.exists() {
            fs::create_dir_all(&package_dir)?;
            fs::create_dir_all(&package_dir.join("bin"))?;
            fs::create_dir_all(&package_dir.join("version"))?;
        }

        let cask_file_content = {
            let cask_file = File::open(&cask_file_path)?;
            let mut buf_reader = BufReader::new(&cask_file);
            let mut file_content = String::new();
            buf_reader.read_to_string(&mut file_content)?;

            file_content
        };

        let file_path = &package_dir.join("Cask.toml");

        let mut formula_file = File::create(&file_path)?;

        formula_file.write_all(
            format!(
                r#"# The file is generated by Cask. DO NOT MODIFY IT.
[cask]
package_name = "{}"
created_at = "{}"

"#,
                package_name,
                iso8601(&SystemTime::now())
            )
            .as_str()
            .as_bytes(),
        )?;
        formula_file.write_all(cask_file_content.as_bytes())?;
    }

    // remove cloned repo
    fs::remove_dir_all(formula_cloned_dir)?;

    let option_arch = if cfg!(target_arch = "x86") {
        target.x86
    } else if cfg!(target_arch = "x86_64") {
        target.x86_64
    } else if cfg!(target_arch = "arm") {
        target.arm
    } else if cfg!(target_arch = "aarch64") {
        target.aarch64
    } else if cfg!(target_arch = "mips") {
        target.mips
    } else if cfg!(target_arch = "mips64") {
        target.mips64
    } else if cfg!(target_arch = "mips64el") {
        target.mips64el
    } else {
        None
    };

    let arch = match option_arch {
        Some(a) => Ok(a),
        None => Err(eyre::format_err!("{} not support your arch", package_name)),
    }?;

    let tar_file_path = package_dir
        .join("version")
        .join(format!("{}.tar.gz", package_formula.package.version));

    util::download(&arch.url, &tar_file_path).await?;

    Ok(())
}
